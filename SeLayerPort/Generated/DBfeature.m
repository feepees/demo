/*
	DBfeature.h
	The implementation of properties and methods for the DBfeature object.
	Generated by SudzC.com
*/
#import "DBfeature.h"

#import "DBfields.h"
#import "DBwebGeometry.h"
@implementation DBfeature
	@synthesize area = _area;
	@synthesize bsm = _bsm;
	@synthesize fields = _fields;
	@synthesize geometry = _geometry;
	@synthesize oid = _oid;

	- (id) init
	{
		if(self = [super init])
		{
			self.bsm = nil;
			self.fields = [[[NSMutableArray alloc] init] autorelease];
			self.geometry = nil; // [[DBwebGeometry alloc] init];
			self.oid = nil;

		}
		return self;
	}

	+ (DBfeature*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (DBfeature*)[[[DBfeature alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.area = [[Soap getNodeValue: node withName: @"area"] doubleValue];
			self.bsm = [Soap getNodeValue: node withName: @"bsm"];
			self.fields = [[DBfields newWithNode: [Soap getNode: node withName: @"fields"]] object];
			self.geometry = [[DBwebGeometry newWithNode: [Soap getNode: node withName: @"geometry"]] object];
			self.oid = [Soap getNodeValue: node withName: @"oid"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"feature"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		[s appendFormat: @"<area>%@</area>", [NSString stringWithFormat: @"%f", self.area]];
		if (self.bsm != nil) [s appendFormat: @"<bsm>%@</bsm>", [[self.bsm stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.fields != nil && self.fields.count > 0) {
			[s appendFormat: @"<fields>%@</fields>", [DBfields serialize: self.fields]];
		} else {
			[s appendString: @"<fields/>"];
		}
		if (self.geometry != nil) [s appendString: [self.geometry serialize: @"geometry"]];
		if (self.oid != nil) [s appendFormat: @"<oid>%@</oid>", [[self.oid stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[DBfeature class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.bsm != nil) { [self.bsm release]; }
		if(self.fields != nil) { [self.fields release]; }
		if(self.geometry != nil) { [self.geometry release]; }
		if(self.oid != nil) { [self.oid release]; }
		[super dealloc];
	}

@end
