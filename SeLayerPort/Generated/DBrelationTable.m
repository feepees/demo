/*
	DBrelationTable.h
	The implementation of properties and methods for the DBrelationTable object.
	Generated by SudzC.com
*/
#import "DBrelationTable.h"

#import "DBrelationField.h"
#import "DBrelationTable.h"
@implementation DBrelationTable
	@synthesize fieldName = _fieldName;
	@synthesize fields = _fields;
	@synthesize name = _name;
	@synthesize relateFieldName = _relateFieldName;
	@synthesize relationTables = _relationTables;
	@synthesize whereClause = _whereClause;

	- (id) init
	{
		if(self = [super init])
		{
			self.fieldName = nil;
			self.fields = nil; // [[DBrelationField alloc] init];
			self.name = nil;
			self.relateFieldName = nil;
			self.relationTables = nil; // [[DBrelationTable alloc] init];
			self.whereClause = nil;

		}
		return self;
	}

	+ (DBrelationTable*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (DBrelationTable*)[[[DBrelationTable alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.fieldName = [Soap getNodeValue: node withName: @"fieldName"];
			self.fields = [[DBrelationField newWithNode: [Soap getNode: node withName: @"fields"]] object];
			self.name = [Soap getNodeValue: node withName: @"name"];
			self.relateFieldName = [Soap getNodeValue: node withName: @"relateFieldName"];
			self.relationTables = [[DBrelationTable newWithNode: [Soap getNode: node withName: @"relationTables"]] object];
			self.whereClause = [Soap getNodeValue: node withName: @"whereClause"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"relationTable"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.fieldName != nil) [s appendFormat: @"<fieldName>%@</fieldName>", [[self.fieldName stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.fields != nil) [s appendString: [self.fields serialize: @"fields"]];
		if (self.name != nil) [s appendFormat: @"<name>%@</name>", [[self.name stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.relateFieldName != nil) [s appendFormat: @"<relateFieldName>%@</relateFieldName>", [[self.relateFieldName stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.relationTables != nil) [s appendString: [self.relationTables serialize: @"relationTables"]];
		if (self.whereClause != nil) [s appendFormat: @"<whereClause>%@</whereClause>", [[self.whereClause stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[DBrelationTable class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.fieldName != nil) { [self.fieldName release]; }
		if(self.fields != nil) { [self.fields release]; }
		if(self.name != nil) { [self.name release]; }
		if(self.relateFieldName != nil) { [self.relateFieldName release]; }
		if(self.relationTables != nil) { [self.relationTables release]; }
		if(self.whereClause != nil) { [self.whereClause release]; }
		[super dealloc];
	}

@end
