/*
	DBfeatureSet.h
	The implementation of properties and methods for the DBfeatureSet object.
	Generated by SudzC.com
*/
#import "DBfeatureSet.h"

#import "DBfeature.h"
#import "DBfields.h"
@implementation DBfeatureSet
	@synthesize features = _features;
	@synthesize fields = _fields;
	@synthesize geometryType = _geometryType;
	@synthesize recordCount = _recordCount;
	@synthesize tableName = _tableName;

	- (id) init
	{
		if(self = [super init])
		{
			self.features = nil; // [[DBfeature alloc] init];
			self.fields = [[[NSMutableArray alloc] init] autorelease];
			self.geometryType = nil;
			self.tableName = nil;

		}
		return self;
	}

	+ (DBfeatureSet*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (DBfeatureSet*)[[[DBfeatureSet alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.features = [[DBfeature newWithNode: [Soap getNode: node withName: @"features"]] object];
			self.fields = [[DBfields newWithNode: [Soap getNode: node withName: @"fields"]] object];
			self.geometryType = [Soap getNodeValue: node withName: @"geometryType"];
			self.recordCount = [[Soap getNodeValue: node withName: @"recordCount"] longLongValue];
			self.tableName = [Soap getNodeValue: node withName: @"tableName"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"featureSet"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.features != nil) [s appendString: [self.features serialize: @"features"]];
		if (self.fields != nil && self.fields.count > 0) {
			[s appendFormat: @"<fields>%@</fields>", [DBfields serialize: self.fields]];
		} else {
			[s appendString: @"<fields/>"];
		}
		if (self.geometryType != nil) [s appendFormat: @"<geometryType>%@</geometryType>", [[self.geometryType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<recordCount>%@</recordCount>", [NSString stringWithFormat: @"%ld", self.recordCount]];
		if (self.tableName != nil) [s appendFormat: @"<tableName>%@</tableName>", [[self.tableName stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[DBfeatureSet class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.features != nil) { [self.features release]; }
		if(self.fields != nil) { [self.fields release]; }
		if(self.geometryType != nil) { [self.geometryType release]; }
		if(self.tableName != nil) { [self.tableName release]; }
		[super dealloc];
	}

@end
